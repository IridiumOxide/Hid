

module AbsHid where

-- Haskell module generated by the BNF converter




newtype MyIdent = MyIdent String deriving (Eq, Ord, Show, Read)
data Program = Prog [Code]
  deriving (Eq, Ord, Show, Read)

data Code = FCode Function | SCode Stm
  deriving (Eq, Ord, Show, Read)

data Function = Fun Type MyIdent [Decl] [Stm]
  deriving (Eq, Ord, Show, Read)

data Decl = Dec Type MyIdent
  deriving (Eq, Ord, Show, Read)

data Stm
    = SDecl Decl
    | SExp Exp
    | SBlock [Stm]
    | SWhile Exp Stm
    | SReturn Exp
    | SIf Exp Stm
    | SIfElse Exp Stm Stm
    | SFor Exp Exp Exp Stm
    | SPrt Exp
  deriving (Eq, Ord, Show, Read)

data Exp
    = EAss MyIdent Exp
    | EArAss MyIdent ArithAssignOp Exp
    | ELt Exp Exp
    | EGt Exp Exp
    | ELe Exp Exp
    | EGe Exp Exp
    | EEq Exp Exp
    | ENeq Exp Exp
    | EAdd Exp Exp
    | ESub Exp Exp
    | EMul Exp Exp
    | EDiv Exp Exp
    | EMod Exp Exp
    | EInc Exp
    | EDec Exp
    | EUmin Exp
    | ENeg Exp
    | EPreIn MyIdent
    | EPreDe MyIdent
    | EPstIn MyIdent
    | EPstDe MyIdent
    | Call MyIdent [Exp]
    | EVar MyIdent
  deriving (Eq, Ord, Show, Read)

data ArithAssignOp
    = AssignAdd | AssignSubt | AssignMult | AssignDiv | AssignMod
  deriving (Eq, Ord, Show, Read)

data Type = TInt | TBool
  deriving (Eq, Ord, Show, Read)

