module SkelHid where

-- Haskell module generated by the BNF converter

import AbsHid
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transMyIdent :: MyIdent -> Result
transMyIdent x = case x of
  MyIdent string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  Prog codes -> failure x
transCode :: Code -> Result
transCode x = case x of
  FCode function -> failure x
  SCode stm -> failure x
transFunction :: Function -> Result
transFunction x = case x of
  Fun type_ myident decls stms -> failure x
transDecl :: Decl -> Result
transDecl x = case x of
  Dec type_ myidents -> failure x
transStm :: Stm -> Result
transStm x = case x of
  SDecl decl -> failure x
  SExp exp -> failure x
  SBlock stms -> failure x
  SWhile exp stm -> failure x
  SReturn exp -> failure x
  SIf exp stm -> failure x
  SIfElse exp stm1 stm2 -> failure x
  SFor exp1 exp2 exp3 stm -> failure x
transExp :: Exp -> Result
transExp x = case x of
  EAss myident assignop exp -> failure x
  ELt exp1 exp2 -> failure x
  EGt exp1 exp2 -> failure x
  ELe exp1 exp2 -> failure x
  EGe exp1 exp2 -> failure x
  EEq exp1 exp2 -> failure x
  ENeq exp1 exp2 -> failure x
  EAdd exp1 exp2 -> failure x
  ESub exp1 exp2 -> failure x
  EMul exp1 exp2 -> failure x
  EDiv exp1 exp2 -> failure x
  EInc exp -> failure x
  EDec exp -> failure x
  Umin exp -> failure x
  ENeg exp -> failure x
  EPreIn myident -> failure x
  EPreDe myident -> failure x
  EPstIn myident -> failure x
  EPstDe myident -> failure x
  Call myident exps -> failure x
  EVar myident -> failure x
transAssignOp :: AssignOp -> Result
transAssignOp x = case x of
  Assign -> failure x
  AssignAdd -> failure x
  AssignSubt -> failure x
  AssignMult -> failure x
  AssignDiv -> failure x
transType :: Type -> Result
transType x = case x of
  TInt -> failure x
  TBool -> failure x
